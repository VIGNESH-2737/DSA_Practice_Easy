class Solution {
    public int rob(int[] nums) {
        int[] dp = new int[nums.length+1];
        Arrays.fill(dp , -1);
      return hrob3(nums);
    }

    public int hrob(int[] nums, int index, int[] dp){
        if(index == 0) return nums[index];

        if(index < 0) return 0;

        if(dp[index] != -1) return dp[index];

        int pick = nums[index] + hrob(nums, index-2, dp);

        int notpick = 0 + hrob(nums, index-1, dp);

        return dp[index] = Math.max(pick, notpick);
    }

    public int hrob2(int[] nums, int indexx){

        if(nums.length == 0)
            return 0;

        if(nums.length == 1){
            return nums[0];
        }

        if(nums.length == 2){
            return Math.max(nums[0],nums[1]);
        }

        int[] dp = new int[nums.length+1];
       int prev2 = nums[0];
       //if(num.length > 1)
        int prev = nums[1];
       int current=0;
        for(int index = 1; index < nums.length; index++){

            int pick = nums[index];
            if(index > 1){
                pick += prev2;
                prev2 = prev;
            }

            int notpick = 0 + prev;

            current = Math.max(pick, notpick);

            prev = current;

        }

        return current;
    }

    public int hrob3(int[] nums){
        int prev = 0;
        int prev2 = 0;

        for(int num: nums){
            int temp = Math.max(num + prev2, prev);
            prev2 = prev;
            prev = temp;
        }

        return prev;
    }
}
