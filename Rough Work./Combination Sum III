class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(1, k, n, new ArrayList<>(), result);
        return result;
    }

    private static void backtrack(int start, int k, int remaining, List<Integer> path, List<List<Integer>> result) {

    if(k <= 0){
            if(remaining == 0){
                // System.out.println(path);
                result.add(new ArrayList<>(path));
            }
            return;
        }
        
    for(int i= start; i <= 9; i++){
        if(i > remaining) break;
        path.add(i);
        k = k-1;
        backtrack( i+1, k,  remaining-i,  path, result);
        k = k+1;
        path.remove(path.size()-1);
    }

    }
}
