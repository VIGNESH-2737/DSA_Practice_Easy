// Rat in Maze

class Solution {
    // Function to find all possible paths
    public ArrayList<String> ratInMaze(int[][] maze) {
        // code here
      ArrayList<String> result = new ArrayList<>();
      boolean[][] visited = new boolean[maze.length][maze.length];
      boolean possible =  ratInMaze(maze, 0, 0, "", result, visited);
      
      if(possible){
          return result;
      }else{
          return new ArrayList<>();
      }
      
    }
    
    public boolean ratInMaze(int[][] maze, int row, int col, String str, ArrayList<String> result, boolean[][] visited){
        
        if( row < 0 || row >= maze.length || col < 0 || col >= maze[0].length 
        || maze[row][col] == 0 || visited[row][col]){
            return false;
        }
        
        if(row == maze.length-1 && col == maze[0].length-1){
            result.add(str);
            return true;
        }
        visited[row][col] = true;
        
        ratInMaze(maze, row+1, col, str+"D", result, visited);
        ratInMaze(maze, row, col-1, str+"L", result, visited);
        ratInMaze(maze, row, col+1, str+"R", result, visited);
        ratInMaze(maze, row-1, col, str+"U", result, visited);
                
        visited[row][col] = false;
        
        return true;
        
        
    }
}
