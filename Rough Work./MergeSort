// Merge Sort


import java.util.*;

class Main {
    public static void main(String[] args) {
        int[] arr = {7,6,5,4,3,2,6,5,2,3,4,5,2,3,4,3,4,5,6,7,8,9,8,7,6,5,4,32,3};
        mergeSort(arr);
        System.out.println(Arrays.toString(arr));
    }
    
    public static void mergeSort(int[] arr){
        int low = 0;
        int high = arr.length-1;
        mergeSort(arr, low, high);
    }
    
    public static void mergeSort(int[] arr, int low, int high){
        
        if(low >= high)
            return;
        
        int mid = (low + high)/2;
        
        mergeSort(arr, low, mid);
        mergeSort(arr, mid+1, high);
        merge(arr, low, mid, high);
        
    }
    
    public static void merge(int[] arr, int low, int mid, int high){
        
        int[] temp = new int[arr.length];
        
        int left = low;
        int right = mid+1;
        int index = low;
        while(left <= mid && right <= high){
            
            if(arr[left] <= arr[right]){
                temp[index++] = arr[left];
                left++;
            }else{
                temp[index++] = arr[right];
                right++;
            }
            
        }
        
        while(left <= mid){
            temp[index++] = arr[left++];
        }
        
        while(right <= high){
            temp[index++] = arr[right++];
        }
        
       // System.out.println(Arrays.toString(temp));
        for(int i = low; i<= high; i++){
            arr[i] = temp[i];
        }
    }
    
}


////////////////////////////////////////////////////////// Optimized /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import java.util.*;

class Main {
    public static void main(String[] args) {
        int[] arr = {7,6,5,4,3,2,6,5,2,3,4,5,2,3,4,3,4,5,6,7,8,9,8,7,6,5,4,32,3};
        mergeSort(arr);
        System.out.println(Arrays.toString(arr));
    }
    
    public static void mergeSort(int[] arr){
        int low = 0;
        int high = arr.length-1;
        mergeSort(arr, low, high);
    }
    
    public static void mergeSort(int[] arr, int low, int high){
        
        if(low >= high)
            return;
        
        int mid = (low + high)/2;
        
        mergeSort(arr, low, mid);
        mergeSort(arr, mid+1, high);
        merge(arr, low, mid, high);
        
    }
    
    public static void merge(int[] arr, int low, int mid, int high){
        
        int[] temp = new int[high-low+1];
        System.out.print(high+"  "+low);
        
        int left = low;
        int right = mid+1;
        int index = 0;
        while(left <= mid && right <= high){
            
            if(arr[left] <= arr[right]){
                temp[index++] = arr[left];
                left++;
            }else{
                temp[index++] = arr[right];
                right++;
            }
            
        }
        
        while(left <= mid){
            temp[index++] = arr[left++];
        }
        
        while(right <= high){
            temp[index++] = arr[right++];
        }
        
        System.out.println(Arrays.toString(temp));
        for(int i = low; i<= high; i++){
            arr[i] = temp[i-low];
        }
    }
    
}
